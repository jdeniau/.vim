snippet ld "Ladybug Dump" b
ld($${1:var});
endsnippet

snippet ldd "Ladybug Dump Die" b
ldd($${1:var});
endsnippet

snippet atoum "atoum bootstrap" b
$this
    ->given($this->newTestedInstance)
    ->then
        ->${1}
;
endsnippet


snippet rest_controller "FOS Rest controller" b
<?php

namespace Mapado\TicketingBundle\Controller;

use FOS\RestBundle\Controller\Annotations as Rest;
use InvalidArgumentException;
use Mapado\TicketingBundle\Entity\\${1:ClassName};
use Nelmio\ApiDocBundle\Annotation\ApiDoc;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;

/**
 * Class $1Controller
 * @author Julien Deniau <julien.deniau@mapado.com>
 *
 * @Rest\RouteResource("$1")
 */
class $1Controller extends FOSRestBaseController
{
    /**
     * cgetAction
     *
     * @access public
     * @return Response
     *
     * @ApiDoc(
     *  resource=true,
     *  section="$1",
     *  description="Get a $1",
     *  requirements={
     *   {"name"="id", "description"="$1 id", "dataType"="int"}
     *  }
     * )
     *
     * @Rest\Get("/${2:underscore_case}s", defaults={"_resource": "$1"})
     *
     * @Rest\QueryParam(name="itemsPerPage", requirements="\d+", strict=true, nullable=true, description="Item count limit")
     * @Rest\QueryParam(name="page", requirements="\d+", strict=true, nullable=true, description="Page to fetch")
     *
     * @ParamConverter("page")
     * @ParamConverter("itemsPerPage")
     */
    public function cgetAction(Request $request, $page, $itemsPerPage)
    {
        if (!$this->get('api_authorization_checker')->isGrantedAccess($request)) {
            throw $this->createAccessDeniedException('forbidden');
        }

        $queryBuilder = $this->get('mapado_ticketing.repository.$2')
            ->createQueryBuilder('${3:qbAlias}');

        $this->applyFilters($1::class, $queryBuilder, $request);

        $data = $this->getPaginatedData($queryBuilder, $itemsPerPage, $page);

        $view = $this->view($data);

        return $this->handleView($view);
    }

    /**
     * getAction
     *
     * @access public
     * @return Response
     *
     * @ApiDoc(
     *  resource=true,
     *  section="$1",
     *  description="Get a $1",
     *  requirements={
     *   {"name"="id", "description"="$1 id", "dataType"="int"}
     *  }
     * )
     *
     * @Rest\Get("/$2s/{id}", defaults={"_resource": "$1"})
     *
     * @ParamConverter(
     *     "${4:snakeCase}",
     *     class="Mapado\TicketingBundle\Entity\\$1",
     *     options={"mapping" = {"id" = "id"}, "entity_manager" = "default"}
     * )
     */
    public function getAction($1 $$4)
    {
        $view = $this->view($$4);

        return $this->handleView($view);
    }

    /**
     * putAction
     *
     * @access public
     * @return Response
     *
     * @ApiDoc(
     *  resource=true,
     *  section="$1",
     *  description="Update a $1",
     *  requirements={
     *   {"name"="id", "description"="$1 id", "dataType"="int"}
     *  }
     * )
     *
     * @Rest\Put("/$2s/{id}", defaults={"_resource": "$1"})
     */
    public function putAction()
    {
        try {
            $$4 = $this->get('mapado.json_ld_handler')
                ->deserializeFromRequest('Mapado\TicketingBundle\Entity\\$1');
        } catch (InvalidArgumentException $e) {
            throw new BadRequestHttpException($e->getMessage(), $e);
        }

        if (!$this->get('api_authorization_checker')->isGrantedEdit($$4, $this->getUser())) {
            throw $this->createAccessDeniedException('forbidden');
        }

        $this->get('doctrine.orm.entity_manager')->flush();
        $view = $this->view($$4);

        return $this->handleView($view);
    }

    /**
     * postAction
     *
     * @access public
     * @return Response
     *
     * @ApiDoc(
     *  resource=true,
     *  section="$1",
     *  description="Create a $1"
     * )
     *
     * @Rest\Post("/$2s", defaults={"_resource": "$1"})
     */
    public function postAction()
    {
        try {
            $$4 = $this->get('mapado.json_ld_handler')
              ->deserializeFromRequest('Mapado\TicketingBundle\Entity\\$1');
        } catch (InvalidArgumentException $e) {
            throw new BadRequestHttpException($e->getMessage(), $e);
        }

        if (!$this->get('api_authorization_checker')->isGrantedEdit($$4, $this->getUser())) {
            throw $this->createAccessDeniedException('forbidden');
        }

        $entityManager = $this->get('doctrine.orm.entity_manager');

        $entityManager->persist($$4);
        $entityManager->flush();

        $view = $this->view($$4, 201);

        return $this->handleView($view);
    }

    /**
     * deleteAction
     *
     * @access public
     * @return Response
     *
     * @ApiDoc(
     *  resource=true,
     *  section="$1",
     *  description="Delete a $1",
     *  requirements={
     *   {"name"="id", "description"="$1 id", "dataType"="int"}
     *  }
     * )
     *
     * @Rest\Delete("/$2s/{id}", defaults={"_resource": "$1"})
     *
     * @ParamConverter(
     *     "$4",
     *     class="Mapado\TicketingBundle\Entity\\$1",
     *     options={"mapping" = {"id" = "id"}, "entity_manager" = "default"}
     * )
     */
    public function deleteAction($1 $$4)
    {
        if (!$this->get('api_authorization_checker')->isGrantedEdit($$4, $this->getUser())) {
            throw $this->createAccessDeniedException('forbidden');
        }

        $entityManager = $this->get('doctrine.orm.entity_manager');
        $entityManager->remove($$4);
        $entityManager->flush();

        return $this->handleView($this->view(null, 204));
    }
	${5:

    /**
     * getFilterList
     *
     * @access protected
     * @return array
     */
    protected function getFilterList() : array
    {
        return [];
    }
	}
}
endsnippet
